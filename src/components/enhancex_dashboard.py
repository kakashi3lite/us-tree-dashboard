"""\nEnhanceX Dashboard Integration Component\n\nIntegrates all EnhanceX features into the main dashboard.\n"""\n\nimport json\nfrom datetime import datetime\n\nimport dash\nfrom dash import html, dcc, Input, Output, State, callback_context\nimport dash_bootstrap_components as dbc\n\nfrom ..memory import EnhanceX\nfrom .theme_switcher import create_theme_switcher, register_callbacks as register_theme_callbacks\nfrom .visualization_preferences import create_visualization_preferences, register_callbacks as register_viz_callbacks\nfrom .notification_system import create_notification_system, register_callbacks as register_notification_callbacks\nfrom .project_context_manager import create_project_context_manager, register_callbacks as register_context_callbacks\n\n# Initialize EnhanceX\nenhancex = EnhanceX()\n\ndef create_enhancex_dashboard():\n    """Create the EnhanceX dashboard integration component."""\n    return html.Div(\n        className="enhancex-dashboard",\n        children=[\n            # Hidden div to signal EnhanceX initialization\n            html.Div(id="enhancex-initialized", style={"display": "none"}),\n            \n            # Store for EnhanceX preferences\n            dcc.Store(id="enhancex-preferences-store"),\n            \n            # Store for EnhanceX session state\n            dcc.Store(id="enhancex-session-store"),\n            \n            # Interval for session keepalive\n            dcc.Interval(\n                id="enhancex-session-interval",\n                interval=60 * 1000,  # 1 minute\n                n_intervals=0\n            ),\n            \n            # EnhanceX Features Container\n            dbc.Tabs(\n                id="enhancex-tabs",\n                className="enhancex-tabs",\n                children=[\n                    # Theme Tab\n                    dbc.Tab(\n                        label="Theme",\n                        tab_id="theme-tab",\n                        children=[\n                            html.Div(\n                                className="p-3",\n                                children=[\n                                    create_theme_switcher()\n                                ]\n                            )\n                        ]\n                    ),\n                    \n                    # Visualization Preferences Tab\n                    dbc.Tab(\n                        label="Visualization",\n                        tab_id="visualization-tab",\n                        children=[\n                            html.Div(\n                                className="p-3",\n                                children=[\n                                    create_visualization_preferences()\n                                ]\n                            )\n                        ]\n                    ),\n                    \n                    # Project Context Tab\n                    dbc.Tab(\n                        label="Project Context",\n                        tab_id="context-tab",\n                        children=[\n                            html.Div(\n                                className="p-3",\n                                children=[\n                                    create_project_context_manager()\n                                ]\n                            )\n                        ]\n                    )\n                ]\n            ),\n            \n            # Notification System (outside tabs)\n            create_notification_system()\n        ]\n    )\n\ndef register_callbacks(app):\n    """Register callbacks for the EnhanceX dashboard integration."""\n    \n    # Register component callbacks\n    register_theme_callbacks(app)\n    register_viz_callbacks(app)\n    register_notification_callbacks(app)\n    register_context_callbacks(app)\n    \n    # Initialize EnhanceX\n    @app.callback(\n        Output("enhancex-initialized", "children"),\n        Input("enhancex-session-interval", "n_intervals")\n    )\n    def initialize_enhancex(n_intervals):\n        # Start or keep alive the EnhanceX session\n        if n_intervals == 0:\n            # Initial load - start session\n            enhancex.start_session()\n        else:\n            # Keep session alive\n            enhancex.keep_session_alive()\n            \n        return datetime.now().isoformat()\n    \n    # Load EnhanceX preferences\n    @app.callback(\n        Output("enhancex-preferences-store", "children"),\n        Input("enhancex-initialized", "children")\n    )\n    def load_enhancex_preferences(_):\n        try:\n            # Get all preferences from EnhanceX\n            preferences = enhancex.get_all_preferences()\n            return json.dumps(preferences)\n        except Exception as e:\n            print(f"Error loading EnhanceX preferences: {e}")\n            return json.dumps({})\n    \n    # Track page views\n    @app.callback(\n        Output("enhancex-session-store", "data"),\n        [Input("url", "pathname"),\n         Input("enhancex-initialized", "children")],\n        State("enhancex-session-store", "data")\n    )\n    def track_page_view(pathname, _, current_data):\n        if not pathname:\n            return current_data or {}\n        \n        # Record page view interaction\n        enhancex.record_interaction(\n            interaction_type="page_view",\n            data={\n                "pathname": pathname,\n                "timestamp": datetime.now().isoformat()\n            }\n        )\n        \n        # Update session state\n        if current_data is None:\n            current_data = {}\n            \n        current_data["last_pathname"] = pathname\n        current_data["last_activity"] = datetime.now().isoformat()\n        \n        return current_data\n    \n    # Clean up session on browser close/refresh\n    @app.callback(\n        Output("enhancex-session-store", "data", allow_duplicate=True),\n        Input("enhancex-session-store", "modified_timestamp"),\n        State("enhancex-session-store", "data"),\n        prevent_initial_call=True\n    )\n    def handle_session_cleanup(ts, data):\n        if ts is None:\n            # Browser closed or refreshed\n            enhancex.end_session()\n            \n        return data or {}
\n# Function to track user interactions\ndef track_interaction(interaction_type):\n    """\n    Decorator to track user interactions with EnhanceX.\n    \n    Args:\n        interaction_type (str): Type of interaction to track\n        \n    Returns:\n        function: Decorated callback function\n    """\n    def decorator(callback_func):\n        def wrapper(*args, **kwargs):\n            # Call the original callback\n            result = callback_func(*args, **kwargs)\n            \n            # Record the interaction\n            try:\n                # Extract relevant data from args/kwargs\n                ctx = callback_context\n                triggered = ctx.triggered[0] if ctx.triggered else None\n                \n                interaction_data = {\n                    "callback": callback_func.__name__,\n                    "triggered": triggered["prop_id"] if triggered else None,\n                    "timestamp": datetime.now().isoformat()\n                }\n                \n                enhancex.record_interaction(\n                    interaction_type=interaction_type,\n                    data=interaction_data\n                )\n            except Exception as e:\n                print(f"Error recording interaction: {e}")\n                \n            return result\n        return wrapper\n    return decorator