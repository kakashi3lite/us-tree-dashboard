"""\nProject Context Manager Component for EnhanceX\n\nProvides UI components for managing project contexts\nand demonstrates integration with EnhanceX context management.\n"""\n\nimport json\nfrom datetime import datetime\n\nimport dash\nfrom dash import html, dcc, Input, Output, State, callback_context\nimport dash_bootstrap_components as dbc\n\nfrom ..memory import EnhanceX\n\n# Initialize EnhanceX\nenhancex = EnhanceX()\n\ndef create_project_context_manager():\n    """Create a project context manager component."""\n    return html.Div(\n        className="project-context-manager",\n        children=[\n            html.H5("Project Context"),\n            html.Hr(),\n            \n            # Current context display\n            html.Div(\n                id="current-context-container",\n                className="current-context-container mb-3",\n                children=[\n                    html.P("Current Context:", className="mb-1"),\n                    html.Div(\n                        id="current-context-display",\n                        className="current-context-display"\n                    )\n                ]\n            ),\n            \n            # Context selector\n            html.Div(\n                className="mb-3",\n                children=[\n                    html.Label("Load Context", className="form-label"),\n                    dcc.Dropdown(\n                        id="context-selector-dropdown",\n                        placeholder="Select a saved context..."\n                    ),\n                    dbc.Button(\n                        "Load",\n                        id="load-context-button",\n                        color="primary",\n                        size="sm",\n                        className="mt-2"\n                    )\n                ]\n            ),\n            \n            # Create new context\n            dbc.Collapse(\n                dbc.Card(\n                    dbc.CardBody([\n                        html.H6("Create New Context", className="card-title"),\n                        dbc.Input(\n                            id="new-context-name-input",\n                            placeholder="Context name",\n                            type="text",\n                            className="mb-2"\n                        ),\n                        dbc.Textarea(\n                            id="new-context-description-input",\n                            placeholder="Context description",\n                            className="mb-2",\n                            style={"height": "100px"}\n                        ),\n                        dbc.Button(\n                            "Create",\n                            id="create-context-button",\n                            color="success",\n                            size="sm"\n                        )\n                    ]),\n                    className="mt-3"\n                ),\n                id="create-context-collapse",\n                is_open=False\n            ),\n            \n            # Toggle button for create context form\n            dbc.Button(\n                "New Context",\n                id="toggle-create-context-button",\n                color="secondary",\n                outline=True,\n                size="sm",\n                className="mt-2"\n            ),\n            \n            # Context items form\n            html.Div(\n                id="context-items-container",\n                className="context-items-container mt-4",\n                children=[\n                    html.H6("Context Items"),\n                    html.Div(\n                        id="context-items-list",\n                        className="context-items-list"\n                    ),\n                    html.Div(\n                        className="mt-3",\n                        children=[\n                            dbc.Input(\n                                id="new-item-key-input",\n                                placeholder="Key",\n                                type="text",\n                                className="mb-2"\n                            ),\n                            dbc.Textarea(\n                                id="new-item-value-input",\n                                placeholder="Value",\n                                className="mb-2",\n                                style={"height": "80px"}\n                            ),\n                            dbc.Button(\n                                "Add Item",\n                                id="add-context-item-button",\n                                color="primary",\n                                size="sm"\n                            )\n                        ]\n                    )\n                ]\n            ),\n            \n            # Save context button\n            dbc.Button(\n                "Save Current Context",\n                id="save-context-button",\n                color="success",\n                className="mt-4"\n            ),\n            \n            # Store for context data\n            dcc.Store(id="context-store", data={}),\n            dcc.Store(id="available-contexts-store", data=[])\n        ]\n    )\n\ndef render_context_item(key, value, index):\n    """\n    Render a context item as a Dash component.\n    \n    Args:\n        key (str): Item key\n        value (str): Item value\n        index (int): Item index\n        \n    Returns:\n        dash.html.Div: Context item component\n    """\n    return dbc.Card(\n        dbc.CardBody([\n            html.Div(\n                className="d-flex justify-content-between align-items-center",\n                children=[\n                    html.Strong(key, className="context-item-key"),\n                    html.Button(\n                        html.I(className="fas fa-times"),\n                        id={"type": "remove-context-item", "index": index},\n                        className="btn btn-sm btn-link text-danger p-0",\n                        title="Remove item"\n                    )\n                ]\n            ),\n            html.P(\n                value,\n                className="context-item-value mb-0 mt-1"\n            )\n        ]),\n        className="mb-2 context-item-card"\n    )\n\ndef register_callbacks(app):\n    """Register callbacks for the project context manager."""\n    \n    # Initialize available contexts\n    @app.callback(\n        Output("available-contexts-store", "data"),\n        Input("enhancex-initialized", "children")\n    )\n    def initialize_available_contexts(_):\n        try:\n            # Get available contexts from EnhanceX\n            contexts = enhancex.list_project_contexts()\n            return contexts\n        except Exception as e:\n            print(f"Error retrieving available contexts: {e}")\n            return []\n    \n    # Populate context selector dropdown\n    @app.callback(\n        Output("context-selector-dropdown", "options"),\n        Input("available-contexts-store", "data")\n    )\n    def populate_context_selector(available_contexts):\n        if not available_contexts:\n            return []\n        \n        return [\n            {"label": context.get("name", f"Context {i}"), "value": context.get("id")}\n            for i, context in enumerate(available_contexts)\n        ]\n    \n    # Toggle create context form\n    @app.callback(\n        Output("create-context-collapse", "is_open"),\n        Input("toggle-create-context-button", "n_clicks"),\n        State("create-context-collapse", "is_open")\n    )\n    def toggle_create_context(n_clicks, is_open):\n        if n_clicks:\n            return not is_open\n        return is_open\n    \n    # Create new context\n    @app.callback(\n        [Output("available-contexts-store", "data", allow_duplicate=True),\n         Output("new-context-name-input", "value"),\n         Output("new-context-description-input", "value"),\n         Output("create-context-collapse", "is_open", allow_duplicate=True)],\n        Input("create-context-button", "n_clicks"),\n        [State("new-context-name-input", "value"),\n         State("new-context-description-input", "value"),\n         State("available-contexts-store", "data")],\n        prevent_initial_call=True\n    )\n    def create_new_context(n_clicks, name, description, available_contexts):\n        if not n_clicks or not name:\n            return dash.no_update, dash.no_update, dash.no_update, dash.no_update\n        \n        try:\n            # Create new context in EnhanceX\n            context = enhancex.create_project_context(\n                name=name,\n                description=description or "",\n                items={}\n            )\n            \n            # Add to available contexts\n            if available_contexts is None:\n                available_contexts = []\n                \n            available_contexts.append(context)\n            \n            # Clear inputs and close form\n            return available_contexts, "", "", False\n        except Exception as e:\n            print(f"Error creating context: {e}")\n            return dash.no_update, dash.no_update, dash.no_update, dash.no_update\n    \n    # Load context\n    @app.callback(\n        Output("context-store", "data"),\n        Input("load-context-button", "n_clicks"),\n        [State("context-selector-dropdown", "value"),\n         State("available-contexts-store", "data")],\n        prevent_initial_call=True\n    )\n    def load_context(n_clicks, context_id, available_contexts):\n        if not n_clicks or not context_id or not available_contexts:\n            return dash.no_update\n        \n        try:\n            # Find context in available contexts\n            context = None\n            for ctx in available_contexts:\n                if ctx.get("id") == context_id:\n                    context = ctx\n                    break\n                    \n            if not context:\n                # Try to load from EnhanceX directly\n                context = enhancex.get_project_context(context_id)\n                \n            if context:\n                return context\n        except Exception as e:\n            print(f"Error loading context: {e}")\n            \n        return dash.no_update\n    \n    # Display current context\n    @app.callback(\n        Output("current-context-display", "children"),\n        Input("context-store", "data")\n    )\n    def display_current_context(context):\n        if not context:\n            return html.P("No context loaded", className="text-muted")\n        \n        context_name = context.get("name", "Unnamed Context")\n        context_description = context.get("description", "")\n        \n        return html.Div([\n            html.H6(context_name, className="mb-1"),\n            html.P(context_description, className="text-muted small mb-0")\n        ])\n    \n    # Display context items\n    @app.callback(\n        Output("context-items-list", "children"),\n        Input("context-store", "data")\n    )\n    def display_context_items(context):\n        if not context or not context.get("items"):\n            return html.P("No items in context", className="text-muted")\n        \n        items = context.get("items", {})\n        \n        if not items:\n            return html.P("No items in context", className="text-muted")\n        \n        return [\n            render_context_item(key, value, i)\n            for i, (key, value) in enumerate(items.items())\n        ]\n    \n    # Add context item\n    @app.callback(\n        [Output("context-store", "data", allow_duplicate=True),\n         Output("new-item-key-input", "value"),\n         Output("new-item-value-input", "value")],\n        Input("add-context-item-button", "n_clicks"),\n        [State("new-item-key-input", "value"),\n         State("new-item-value-input", "value"),\n         State("context-store", "data")],\n        prevent_initial_call=True\n    )\n    def add_context_item(n_clicks, key, value, context):\n        if not n_clicks or not key or not value:\n            return dash.no_update, dash.no_update, dash.no_update\n        \n        if not context:\n            context = {\n                "name": "New Context",\n                "description": "",\n                "items": {}\n            }\n        \n        if "items" not in context:\n            context["items"] = {}\n            \n        # Add item to context\n        context["items"][key] = value\n        \n        # Clear inputs\n        return context, "", ""\n    \n    # Remove context item\n    @app.callback(\n        Output("context-store", "data", allow_duplicate=True),\n        Input({"type": "remove-context-item", "index": dash.ALL}, "n_clicks"),\n        [State("context-store", "data")],\n        prevent_initial_call=True\n    )\n    def remove_context_item(n_clicks, context):\n        if not any(n_clicks) or not context or not context.get("items"):\n            return dash.no_update\n        \n        ctx = callback_context\n        if not ctx.triggered:\n            return dash.no_update\n        \n        # Get the index of the item to remove\n        button_id = ctx.triggered[0]["prop_id"].split(".")[0]\n        try:\n            button_props = json.loads(button_id)\n            index = button_props["index"]\n            \n            # Get the key at the specified index\n            items = context.get("items", {})\n            keys = list(items.keys())\n            \n            if 0 <= index < len(keys):\n                key_to_remove = keys[index]\n                items.pop(key_to_remove, None)\n                context["items"] = items\n                return context\n        except Exception as e:\n            print(f"Error removing context item: {e}")\n            \n        return dash.no_update\n    \n    # Save current context\n    @app.callback(\n        [Output("available-contexts-store", "data", allow_duplicate=True),\n         Output("context-store", "data", allow_duplicate=True)],\n        Input("save-context-button", "n_clicks"),\n        [State("context-store", "data"),\n         State("available-contexts-store", "data")],\n        prevent_initial_call=True\n    )\n    def save_current_context(n_clicks, context, available_contexts):\n        if not n_clicks or not context:\n            return dash.no_update, dash.no_update\n        \n        try:\n            # Check if context has an ID (existing context)\n            context_id = context.get("id")\n            \n            if context_id:\n                # Update existing context\n                updated_context = enhancex.update_project_context(\n                    context_id=context_id,\n                    name=context.get("name"),\n                    description=context.get("description", ""),\n                    items=context.get("items", {})\n                )\n                \n                # Update in available contexts\n                if available_contexts:\n                    for i, ctx in enumerate(available_contexts):\n                        if ctx.get("id") == context_id:\n                            available_contexts[i] = updated_context\n                            break\n                            \n                return available_contexts, updated_context\n            else:\n                # Create new context if no ID\n                new_context = enhancex.create_project_context(\n                    name=context.get("name", "New Context"),\n                    description=context.get("description", ""),\n                    items=context.get("items", {})\n                )\n                \n                # Add to available contexts\n                if available_contexts is None:\n                    available_contexts = []\n                    \n                available_contexts.append(new_context)\n                \n                return available_contexts, new_context\n        except Exception as e:\n            print(f"Error saving context: {e}")\n            \n        return dash.no_update, dash.no_update