"""\nTheme Switcher Component for EnhanceX\n\nProvides a UI component for switching between different themes\nand demonstrates integration with EnhanceX preferences.\n"""\n\nimport dash\nfrom dash import html, dcc, Input, Output, State, callback_context\nimport dash_bootstrap_components as dbc\n\nfrom ..memory import EnhanceX\n\n# Initialize EnhanceX\nenhancex = EnhanceX()\n\ndef create_theme_switcher():\n    """Create a theme switcher component."""\n    return html.Div(\n        className="theme-switcher",\n        children=[\n            html.P("Theme:", className="mb-1"),\n            html.Div([\n                html.Div(\n                    id="theme-light",\n                    className="theme-option theme-light-option",\n                    title="Light Theme",\n                    n_clicks=0\n                ),\n                html.Div(\n                    id="theme-dark",\n                    className="theme-option theme-dark-option",\n                    title="Dark Theme",\n                    n_clicks=0\n                ),\n                html.Div(\n                    id="theme-high-contrast",\n                    className="theme-option theme-high-contrast-option",\n                    title="High Contrast Theme",\n                    n_clicks=0\n                )\n            ], className="d-flex"),\n            dcc.Store(id="theme-store")\n        ]\n    )\n\ndef register_callbacks(app):\n    """Register callbacks for the theme switcher."""\n    \n    # Initialize theme from preferences\n    @app.callback(\n        Output("theme-store", "data"),\n        Input("enhancex-preferences-store", "children")\n    )\n    def initialize_theme(preferences_json):\n        import json\n        \n        try:\n            if preferences_json:\n                preferences = json.loads(preferences_json)\n                ui_prefs = preferences.get("ui", {})\n                theme = ui_prefs.get("theme", "light")\n                return {"theme": theme}\n        except (json.JSONDecodeError, TypeError):\n            pass\n            \n        return {"theme": "light"}\n    \n    # Update active theme indicator\n    @app.callback(\n        [Output("theme-light", "className"),\n         Output("theme-dark", "className"),\n         Output("theme-high-contrast", "className")],\n        Input("theme-store", "data")\n    )\n    def update_active_theme(theme_data):\n        if not theme_data:\n            theme = "light"\n        else:\n            theme = theme_data.get("theme", "light")\n        \n        light_class = "theme-option theme-light-option" + (" active" if theme == "light" else "")\n        dark_class = "theme-option theme-dark-option" + (" active" if theme == "dark" else "")\n        high_contrast_class = "theme-option theme-high-contrast-option" + (" active" if theme == "high-contrast" else "")\n        \n        return light_class, dark_class, high_contrast_class\n    \n    # Handle theme selection\n    @app.callback(\n        Output("theme-store", "data", allow_duplicate=True),\n        [Input("theme-light", "n_clicks"),\n         Input("theme-dark", "n_clicks"),\n         Input("theme-high-contrast", "n_clicks")],\n        State("theme-store", "data"),\n        prevent_initial_call=True\n    )\n    def select_theme(light_clicks, dark_clicks, high_contrast_clicks, current_theme):\n        ctx = callback_context\n        if not ctx.triggered:\n            return dash.no_update\n        \n        # Get the ID of the clicked component\n        button_id = ctx.triggered[0]["prop_id"].split(".")[0]\n        \n        if button_id == "theme-light":\n            theme = "light"\n        elif button_id == "theme-dark":\n            theme = "dark"\n        elif button_id == "theme-high-contrast":\n            theme = "high-contrast"\n        else:\n            return dash.no_update\n        \n        # Save preference to EnhanceX\n        enhancex.set_user_preference("ui", "theme", theme)\n        \n        return {"theme": theme}\n    \n    # Apply theme to app container\n    @app.callback(\n        Output("app-container", "className"),\n        Input("theme-store", "data")\n    )\n    def apply_theme(theme_data):\n        if not theme_data:\n            theme = "light"\n        else:\n            theme = theme_data.get("theme", "light")\n        \n        return f"app-container theme-{theme}"