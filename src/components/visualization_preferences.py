"""\nVisualization Preferences Component for EnhanceX\n\nProvides UI components for customizing visualization preferences\nand demonstrates integration with EnhanceX preferences.\n"""\n\nimport dash\nfrom dash import html, dcc, Input, Output, State, callback_context\nimport dash_bootstrap_components as dbc\n\nfrom ..memory import EnhanceX\n\n# Initialize EnhanceX\nenhancex = EnhanceX()\n\n# Available color palettes\nCOLOR_PALETTES = {\n    "viridis": "Viridis",\n    "plasma": "Plasma",\n    "inferno": "Inferno",\n    "magma": "Magma",\n    "cividis": "Cividis",\n    "turbo": "Turbo",\n    "blues": "Blues",\n    "greens": "Greens",\n    "reds": "Reds",\n    "purples": "Purples",\n    "oranges": "Oranges",\n    "greys": "Greys"\n}\n\n# Available chart types\nCHART_TYPES = {\n    "bar": "Bar Chart",\n    "line": "Line Chart",\n    "scatter": "Scatter Plot",\n    "pie": "Pie Chart",\n    "heatmap": "Heatmap",\n    "box": "Box Plot",\n    "violin": "Violin Plot",\n    "histogram": "Histogram"\n}\n\ndef create_visualization_preferences():\n    """Create a visualization preferences component."""\n    return html.Div(\n        className="chart-controls",\n        children=[\n            html.H5("Visualization Preferences"),\n            html.Hr(),\n            \n            # Chart Type\n            html.Div(\n                className="mb-3",\n                children=[\n                    html.Label("Default Chart Type", className="form-label"),\n                    dcc.Dropdown(\n                        id="chart-type-dropdown",\n                        options=[\n                            {"label": label, "value": value}\n                            for value, label in CHART_TYPES.items()\n                        ],\n                        value="bar",\n                        clearable=False\n                    )\n                ]\n            ),\n            \n            # Color Palette\n            html.Div(\n                className="mb-3",\n                children=[\n                    html.Label("Color Palette", className="form-label"),\n                    dcc.Dropdown(\n                        id="color-palette-dropdown",\n                        options=[\n                            {"label": label, "value": value}\n                            for value, label in COLOR_PALETTES.items()\n                        ],\n                        value="viridis",\n                        clearable=False\n                    )\n                ]\n            ),\n            \n            # Grid Lines\n            html.Div(\n                className="mb-3",\n                children=[\n                    html.Label("Show Grid Lines", className="form-label"),\n                    dbc.Checkbox(\n                        id="grid-lines-checkbox",\n                        value=True,\n                        label="Enable grid lines"\n                    )\n                ]\n            ),\n            \n            # Legend Position\n            html.Div(\n                className="mb-3",\n                children=[\n                    html.Label("Legend Position", className="form-label"),\n                    dbc.RadioItems(\n                        id="legend-position-radio",\n                        options=[\n                            {"label": "Top Right", "value": "top-right"},\n                            {"label": "Top Left", "value": "top-left"},\n                            {"label": "Bottom Right", "value": "bottom-right"},\n                            {"label": "Bottom Left", "value": "bottom-left"}\n                        ],\n                        value="top-right",\n                        inline=True\n                    )\n                ]\n            ),\n            \n            # Apply Button\n            dbc.Button(\n                "Apply",\n                id="apply-viz-preferences-button",\n                color="primary",\n                className="mt-2"\n            ),\n            \n            # Store for preferences\n            dcc.Store(id="viz-preferences-store")\n        ]\n    )\n\ndef register_callbacks(app):\n    """Register callbacks for visualization preferences."""\n    \n    # Initialize preferences from EnhanceX\n    @app.callback(\n        Output("viz-preferences-store", "data"),\n        Input("enhancex-preferences-store", "children")\n    )\n    def initialize_preferences(preferences_json):\n        import json\n        \n        try:\n            if preferences_json:\n                preferences = json.loads(preferences_json)\n                viz_prefs = preferences.get("visualization", {})\n                \n                return {\n                    "chart_type": viz_prefs.get("default_chart_type", "bar"),\n                    "color_palette": viz_prefs.get("color_palette", "viridis"),\n                    "show_grid_lines": viz_prefs.get("show_grid_lines", True),\n                    "legend_position": viz_prefs.get("legend_position", "top-right")\n                }\n        except (json.JSONDecodeError, TypeError):\n            pass\n            \n        return {\n            "chart_type": "bar",\n            "color_palette": "viridis",\n            "show_grid_lines": True,\n            "legend_position": "top-right"\n        }\n    \n    # Update UI controls from preferences\n    @app.callback(\n        [Output("chart-type-dropdown", "value"),\n         Output("color-palette-dropdown", "value"),\n         Output("grid-lines-checkbox", "value"),\n         Output("legend-position-radio", "value")],\n        Input("viz-preferences-store", "data")\n    )\n    def update_controls_from_preferences(preferences):\n        if not preferences:\n            return "bar", "viridis", True, "top-right"\n        \n        return (\n            preferences.get("chart_type", "bar"),\n            preferences.get("color_palette", "viridis"),\n            preferences.get("show_grid_lines", True),\n            preferences.get("legend_position", "top-right")\n        )\n    \n    # Save preferences when Apply button is clicked\n    @app.callback(\n        Output("viz-preferences-store", "data", allow_duplicate=True),\n        Input("apply-viz-preferences-button", "n_clicks"),\n        [State("chart-type-dropdown", "value"),\n         State("color-palette-dropdown", "value"),\n         State("grid-lines-checkbox", "value"),\n         State("legend-position-radio", "value")],\n        prevent_initial_call=True\n    )\n    def save_preferences(n_clicks, chart_type, color_palette, show_grid_lines, legend_position):\n        if n_clicks is None or n_clicks == 0:\n            return dash.no_update\n        \n        # Save preferences to EnhanceX\n        enhancex.set_user_preference("visualization", "default_chart_type", chart_type)\n        enhancex.set_user_preference("visualization", "color_palette", color_palette)\n        enhancex.set_user_preference("visualization", "show_grid_lines", show_grid_lines)\n        enhancex.set_user_preference("visualization", "legend_position", legend_position)\n        \n        # Show success message\n        # This would typically be handled by a notification system\n        \n        return {\n            "chart_type": chart_type,\n            "color_palette": color_palette,\n            "show_grid_lines": show_grid_lines,\n            "legend_position": legend_position\n        }\n    \n    # Apply visualization preferences to charts\n    @app.callback(\n        Output("visualization-container", "data-preferences"),\n        Input("viz-preferences-store", "data")\n    )\n    def apply_visualization_preferences(preferences):\n        if not preferences:\n            return "{}"\n        \n        import json\n        return json.dumps(preferences)