"""\nEnhanceX Usage Examples\n\nThis module provides examples of how to use the EnhanceX memory management system.\n"""\n\nimport time\nimport logging\nfrom typing import Dict, Any\n\nfrom .enhancex import EnhanceX\n\nlogging.basicConfig(level=logging.INFO, \n                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\ndef basic_usage_example():\n    """Basic usage example for EnhanceX."""\n    # Initialize EnhanceX\n    enhancex = EnhanceX()\n    \n    # Start a session\n    session_id = enhancex.start_session({\n        "user_agent": "Example Browser",\n        "ip_address": "127.0.0.1"\n    })\n    print(f"Started session: {session_id}")\n    \n    # Set user preferences\n    enhancex.set_user_preference("ui", "theme", "dark")\n    enhancex.set_user_preference("visualization", "color_palette", "plasma")\n    \n    # Record some interactions\n    enhancex.record_interaction(\n        "page_view", \n        {"page": "dashboard", "view_time": time.time()}\n    )\n    \n    enhancex.record_interaction(\n        "filter_change", \n        {"filter": "city", "value": "New York"}\n    )\n    \n    enhancex.record_interaction(\n        "chart_click", \n        {"chart": "species_distribution", "value": "Oak"}\n    )\n    \n    # Update session state\n    enhancex.update_session_state({\n        "current_view": "map",\n        "filters": {\n            "city": "New York",\n            "species": "Oak"\n        }\n    })\n    \n    # Get recent interactions\n    recent = enhancex.get_recent_interactions(limit=5)\n    print("\nRecent interactions:")\n    for interaction in recent:\n        print(f"  - {interaction['interaction_type']}: {interaction['data']}")\n    \n    # Get user preferences\n    theme = enhancex.get_user_preference("ui", "theme")\n    print(f"\nUser theme preference: {theme}")\n    \n    # Get session state\n    state = enhancex.get_session_state()\n    print(f"\nCurrent session state: {state}")\n    \n    # Create a project context\n    context_id = enhancex.create_project_context(\n        "Tree Analysis",\n        "Analysis of tree health in urban areas",\n        {\n            "dataset": "urban_trees_2023",\n            "analysis_parameters": {\n                "health_threshold": 0.7,\n                "risk_factors": ["pollution", "drought"]\n            }\n        }\n    )\n    print(f"\nCreated project context: {context_id}")\n    \n    # Store long-term memory\n    enhancex.store_long_term_memory(\n        "last_analysis_results",\n        {\n            "timestamp": time.time(),\n            "health_index": 0.82,\n            "risk_areas": ["downtown", "industrial_zone"]\n        }\n    )\n    \n    # Retrieve long-term memory\n    results = enhancex.retrieve_long_term_memory("last_analysis_results")\n    print(f"\nRetrieved analysis results: {results}")\n    \n    # End session\n    enhancex.end_session()\n    print("\nSession ended")\n\ndef interaction_handler_example():\n    """Example of using interaction handlers."""\n    enhancex = EnhanceX()\n    \n    # Define an interaction handler\n    def handle_filter_change(interaction):\n        print(f"Filter changed: {interaction.data}")\n        # In a real application, this could update UI components,\n        # trigger data reloading, etc.\n    \n    # Register the handler\n    enhancex.register_interaction_handler("filter_change", handle_filter_change)\n    \n    # Start a session\n    enhancex.start_session()\n    \n    # This will trigger the handler\n    enhancex.record_interaction(\n        "filter_change", \n        {"filter": "species", "value": "Maple"}\n    )\n    \n    # End session\n    enhancex.end_session()\n\ndef dashboard_integration_example():\n    """Example of how to integrate EnhanceX with a Dash application."""\n    print("\nDash Integration Example (Pseudocode):\n")\n    print("""\n    # Initialize EnhanceX\n    from src.memory import EnhanceX\n    enhancex = EnhanceX()\n    \n    # In app initialization\n    app = Dash(__name__)\n    \n    # Start session on app load\n    @app.callback(\n        Output('session-store', 'data'),\n        Input('url', 'pathname')\n    )\n    def initialize_session(pathname):\n        if pathname == '/':\n            session_id = enhancex.start_session({\n                'initial_page': pathname\n            })\n            return {'session_id': session_id}\n        return dash.no_update\n    \n    # Record interactions\n    @app.callback(\n        Output('interaction-log', 'children'),\n        Input('filter-dropdown', 'value'),\n        State('session-store', 'data')\n    )\n    def on_filter_change(value, session_data):\n        if session_data and value:\n            enhancex.record_interaction(\n                'filter_change',\n                {'filter': 'main_filter', 'value': value}\n            )\n            # Update session state\n            enhancex.update_session_state({\n                'current_filter': value\n            })\n        return f'Filter set to: {value}'\n    \n    # Use preferences to customize UI\n    @app.callback(\n        Output('app-container', 'style'),\n        Input('theme-toggle', 'value')\n    )\n    def update_theme(theme_value):\n        # Save user preference\n        enhancex.set_user_preference('ui', 'theme', theme_value)\n        \n        # Return appropriate style based on theme\n        if theme_value == 'dark':\n            return {'backgroundColor': '#333', 'color': 'white'}\n        return {'backgroundColor': 'white', 'color': 'black'}\n    """)\n\nif __name__ == "__main__":\n    print("Running EnhanceX examples...")\n    basic_usage_example()\n    interaction_handler_example()\n    dashboard_integration_example()