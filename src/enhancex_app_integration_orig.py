"""\nEnhanceX App Integration\n\nIntegrates the EnhanceX memory management system with the main Dash application.\n"""\n\nimport dash\nfrom dash import html, dcc, Input, Output, State, callback_context\nimport dash_bootstrap_components as dbc\n\nfrom .memory import EnhanceX\nfrom .components.enhancex_dashboard import create_enhancex_dashboard, register_callbacks as register_enhancex_callbacks\nfrom .components.notification_system import add_notification\n\n# Initialize EnhanceX\nenhancex = EnhanceX()\n\ndef integrate_enhancex(app):\n    """\n    Integrate EnhanceX with the main Dash application.\n    \n    Args:\n        app (dash.Dash): The Dash application instance\n    """\n    # Register EnhanceX callbacks\n    register_enhancex_callbacks(app)\n    \n    # Add EnhanceX dashboard to the app layout\n    def extend_layout(original_layout):\n        """Extend the original layout with EnhanceX components."""\n        # Create EnhanceX dashboard\n        enhancex_dashboard = create_enhancex_dashboard()\n        \n        # Wrap the original layout with EnhanceX components\n        new_layout = html.Div(\n            id="app-container",\n            className="app-container theme-light",\n            children=[\n                # Original layout\n                original_layout,\n                \n                # EnhanceX dashboard in a collapsible sidebar\n                html.Div(\n                    className="enhancex-sidebar-container",\n                    children=[\n                        # Toggle button\n                        html.Button(\n                            html.I(className="fas fa-cog"),\n                            id="enhancex-sidebar-toggle",\n                            className="enhancex-sidebar-toggle",\n                            title="EnhanceX Settings"\n                        ),\n                        \n                        # Sidebar content\n                        html.Div(\n                            id="enhancex-sidebar",\n                            className="enhancex-sidebar",\n                            children=[\n                                html.Div(\n                                    className="enhancex-sidebar-header",\n                                    children=[\n                                        html.H5("EnhanceX", className="mb-0"),\n                                        html.Button(\n                                            html.I(className="fas fa-times"),\n                                            id="enhancex-sidebar-close",\n                                            className="enhancex-sidebar-close",\n                                            title="Close"\n                                        )\n                                    ]\n                                ),\n                                html.Div(\n                                    className="enhancex-sidebar-content",\n                                    children=[\n                                        enhancex_dashboard\n                                    ]\n                                )\n                            ]\n                        )\n                    ]\n                )\n            ]\n        )\n        \n        return new_layout\n    \n    # Store the original layout\n    original_layout = app.layout\n    \n    # Replace with extended layout\n    app.layout = extend_layout(original_layout)\n    \n    # Register sidebar toggle callback\n    @app.callback(\n        Output("enhancex-sidebar", "className"),\n        [Input("enhancex-sidebar-toggle", "n_clicks"),\n         Input("enhancex-sidebar-close", "n_clicks")],\n        State("enhancex-sidebar", "className")\n    )\n    def toggle_enhancex_sidebar(n_open, n_close, current_class):\n        ctx = callback_context\n        if not ctx.triggered:\n            return "enhancex-sidebar"\n        \n        button_id = ctx.triggered[0]["prop_id"].split(".")[0]\n        \n        if button_id == "enhancex-sidebar-toggle":\n            if "active" in current_class:\n                return "enhancex-sidebar"\n            else:\n                return "enhancex-sidebar active"\n        elif button_id == "enhancex-sidebar-close":\n            return "enhancex-sidebar"\n            \n        return current_class\n    \n    # Track user interactions with the dashboard\n    def track_dashboard_interaction(component_id, interaction_type=None):\n        """\n        Decorator to track user interactions with dashboard components.\n        \n        Args:\n            component_id (str): ID of the component to track\n            interaction_type (str, optional): Type of interaction to record\n                If None, will use the component_id as the interaction type\n                \n        Returns:\n            function: Decorated callback function\n        """\n        def decorator(callback_func):\n            def wrapper(*args, **kwargs):\n                # Call the original callback\n                result = callback_func(*args, **kwargs)\n                \n                # Record the interaction\n                try:\n                    # Extract relevant data from args/kwargs\n                    ctx = callback_context\n                    triggered = ctx.triggered[0] if ctx.triggered else None\n                    \n                    if triggered and triggered["prop_id"].startswith(f"{component_id}."):\n                        interaction_data = {\n                            "component": component_id,\n                            "callback": callback_func.__name__,\n                            "triggered": triggered["prop_id"] if triggered else None,\n                            "value": triggered["value"] if triggered else None,\n                            "timestamp": enhancex.get_current_timestamp()\n                        }\n                        \n                        enhancex.record_interaction(\n                            interaction_type=interaction_type or component_id,\n                            data=interaction_data\n                        )\n                except Exception as e:\n                    print(f"Error recording interaction: {e}")\n                    \n                return result\n            return wrapper\n        return decorator\n    \n    # Make the decorator available to the app\n    app.track_dashboard_interaction = track_dashboard_interaction\n    \n    # Add notification function to the app\n    app.add_notification = add_notification\n    \n    # Add EnhanceX instance to the app\n    app.enhancex = enhancex\n    \n    # Welcome notification on app start\n    @app.callback(\n        Output("enhancex-initialized", "children", allow_duplicate=True),\n        Input("enhancex-initialized", "children"),\n        prevent_initial_call=True\n    )\n    def show_welcome_notification(timestamp):\n        # Add welcome notification\n        add_notification(\n            notification_type="info",\n            title="Welcome to EnhanceX",\n            message="EnhanceX memory management system is now active. Your preferences and context will be saved automatically.",\n            duration=8000  # 8 seconds\n        )\n        \n        return timestamp\n    \n    return app